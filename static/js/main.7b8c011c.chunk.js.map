{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count1","setcount1","count2","setcount2","count3","setcount3","count4","setcount4","valueChange","console","log","Fragment","className","href","style","opacity","pointerEvents","src","alt","onClick","onChange","value","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAqKeA,MAlKf,WAAgB,IAAD,SAEeC,mBAAS,GAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGeF,mBAAS,GAHxB,mBAGNG,EAHM,KAGEC,EAHF,OAIeJ,mBAAS,GAJxB,mBAINK,EAJM,KAIEC,EAJF,OAKeN,mBAAS,GALxB,mBAKNO,EALM,KAKEC,EALF,KAOPC,EAAc,WAClBC,QAAQC,IAAI,IAEd,OACE,kBAAC,IAAMC,SAAP,KACE,6BAASC,UAAU,iBAEjB,yBAAKA,UAAU,aAAf,iBAGA,yBAAKA,UAAU,QACb,uBAAGC,KAAK,KAAR,QADF,SAIE,uBAAGA,KAAK,IAAIC,MAAO,CAAEC,QAAS,GAAIC,cAAe,SAAjD,mBAMJ,6BAASJ,UAAU,iBACjB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,OAAhB,YAGA,yCAIF,uBAAGC,KAAK,KAAR,sBAGF,yBAAKD,UAAU,iBACb,+BACE,+BACE,4BACE,uCACA,qCACA,uCACA,uCAKJ,+BACE,4BACE,wBAAIA,UAAU,UAEZ,yBAAKK,IAAI,6EAA6EC,IAAI,KAE1F,yBAAKN,UAAU,QACb,gDADF,IACgC,6BAC9B,2CAGA,6BACA,wDAKJ,gCAAK,2CAEL,iCAAM,0BAAMA,UAAU,SAASO,QAAS,kBAAMlB,EAAWD,EAAS,EAAKA,EAAS,EAAI,KAA9E,KAA0F,2BAAOoB,SAAUZ,EAAaa,MAAOrB,EAAQsB,KAAK,SAAS,0BAAMH,QAAS,kBAAMlB,EAAUD,EAAS,IAAIY,UAAU,OAAtD,KAA3J,KACA,gCAAK,4CAAuB,GAATZ,MAMrB,4BACE,wBAAIY,UAAU,UACZ,yBAAKK,IAAI,+EAA+EC,IAAI,KAC5F,yBAAKN,UAAU,QACb,kDADF,IACkC,6BAEhC,2CAGA,6BACA,wDAKJ,gCAAK,2CAEL,iCAAM,0BAAMA,UAAU,SAASO,QAAS,kBAAMhB,EAAUD,EAAS,EAAIA,EAAS,EAAI,KAA5E,KAAwF,2BAAOkB,SAAUZ,EAAaa,MAAOnB,EAAQoB,KAAK,SAAS,0BAAMH,QAAS,kBAAMhB,EAAUD,EAAS,IAAIU,UAAU,OAAtD,KAAzJ,KACA,gCAAK,4CAAuB,GAATV,MAMrB,4BACE,wBAAIU,UAAU,UACZ,yBAAKK,IAAI,gFAAgFC,IAAI,KAC7F,yBAAKN,UAAU,QAEb,mDAFF,IAEmC,6BAEjC,2CAGA,6BACA,wDAKJ,gCAAK,2CAEL,iCAAM,0BAAMA,UAAU,SAASO,QAAS,kBAAMd,EAAUD,EAAS,EAAIA,EAAS,EAAI,IAAIH,WAAS,GAAzF,KAAkG,2BAAOmB,SAAUZ,EAAaa,MAAOjB,EAAQkB,KAAK,SAAS,0BAAMH,QAAS,kBAAMd,EAAUD,EAAS,IAAIQ,UAAU,OAAtD,KAAnK,KACA,gCAAK,4CAAuB,GAATR,MAGrB,4BACE,wBAAIQ,UAAU,UAEZ,yBAAKK,IAAI,4EAA4EC,IAAI,KAEzF,yBAAKN,UAAU,QAEb,+CAFF,IAGyB,6BAEvB,2CAGA,6BACA,wDAKJ,gCAAK,2CAEL,iCAAM,0BAAMA,UAAU,SAASO,QAAS,kBAAMZ,EAAUD,EAAS,EAAIA,EAAS,EAAI,KAA5E,KAAwF,2BAAOc,SAAUZ,EAAaa,MAAOf,EAAQL,UAAU,SAAS,0BAAMkB,QAAS,kBAAMZ,EAAUD,EAAS,IAAIM,UAAU,OAAtD,KAA9J,KACA,gCAAK,4CAAuB,GAATN,YCzIfiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b8c011c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css'\n\nfunction App() {\n\n  const [count1, setcount1] = useState(1);\n  const [count2, setcount2] = useState(1);\n  const [count3, setcount3] = useState(1);\n  const [count4, setcount4] = useState(1);\n\n  const valueChange = () => {\n    console.log(this)\n  }\n  return (\n    <React.Fragment>\n      <section className=\"pageheadtitle\">\n\n        <div className=\"shop_cart\">\n          Shopping Cart\n        </div>\n        <div className=\"item\">\n          <a href=\"#\">Home</a>\n          / &nbsp;\n\n          <a href=\"#\" style={{ opacity: .5, pointerEvents: 'none' }} >\n            Shopping Cart</a>\n        </div>\n\n      </section>\n\n      <section className=\"listing_table\">\n        <div className=\"listing_table_title\">\n          <div className=\"item_wrapper\">\n            <span className=\"bag\">\n              Your Bag\n          </span>\n            <span>\n              4 item\n          </span>\n          </div>\n          <a href=\"#\">Continue Shopping</a>\n        </div>\n\n        <div className=\"table_wrapper\">\n          <table>\n            <thead>\n              <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quality</th>\n                <th>Total</th>\n              </tr>\n\n            </thead>\n\n            <tbody>\n              <tr>\n                <td className=\"d-flex\">\n\n                  <img src=\"https://www.ncodetechnologies.com/miias/images/cart-wooden-chair-63x63.jpg\" alt=\"\" />\n\n                  <div className=\"item\">\n                    <strong>Wooden Chair</strong> <br />\n                    <small>\n                      Size : M\n                </small>\n                    <br />\n                    <small>\n                      Color : White, Gold\n                </small>\n                  </div>\n                </td>\n                <td> <strong>\n                  $98.00</strong></td>\n                <td>  <span className=\"remove\" onClick={() => setcount1((count1 > 1 )? count1 - 1 : 0)}>-</span><input onChange={valueChange} value={count1} type=\"text\" /><span onClick={() => setcount1(count1 + 1)} className=\"add\">+</span> </td>\n                <td> <strong>{`$ ${count1 * 98}`}</strong></td>\n\n              </tr>\n\n\n\n              <tr>\n                <td className=\"d-flex\">\n                  <img src=\"https://www.ncodetechnologies.com/miias/images/cart-lighting-vases-63x63.jpg\" alt=\"\" />\n                  <div className=\"item\">\n                    <strong>Lighting Vases</strong> <br />\n\n                    <small>\n                      Size : M\n</small>\n                    <br />\n                    <small>\n                      Color : White, Gold\n</small>\n                  </div>\n                </td>\n                <td> <strong>\n                  $98.00</strong></td>\n                <td>  <span className=\"remove\" onClick={() => setcount2(count2 > 1 ? count2 - 1 : 0)}>-</span><input onChange={valueChange} value={count2} type=\"text\" /><span onClick={() => setcount2(count2 + 1)} className=\"add\">+</span> </td>\n                <td> <strong>{`$ ${count2 * 98}`}</strong></td>\n\n              </tr>\n\n\n\n              <tr>\n                <td className=\"d-flex\">\n                  <img src=\"https://www.ncodetechnologies.com/miias/images/cart-teapot-ultimate-63x63.jpg\" alt=\"\" />\n                  <div className=\"item\">\n\n                    <strong>Teapot Ultimate</strong> <br />\n\n                    <small>\n                      Size : M\n</small>\n                    <br />\n                    <small>\n                      Color : White, Gold\n</small>\n                  </div>\n                </td>\n                <td> <strong>\n                  $98.00</strong></td>\n                <td>  <span className=\"remove\" onClick={() => setcount3(count3 > 1 ? count3 - 1 : 0)} setcount1>-</span><input onChange={valueChange} value={count3} type=\"text\" /><span onClick={() => setcount3(count3 + 1)} className=\"add\">+</span> </td>\n                <td> <strong>{`$ ${count3 * 98}`}</strong></td>\n\n              </tr>\n              <tr>\n                <td className=\"d-flex\">\n\n                  <img src=\"https://www.ncodetechnologies.com/miias/images/cart-vase-flower-63x63.jpg\" alt=\"\" />\n\n                  <div className=\"item\">\n\n                    <strong>\n                      Vase Flower</strong> <br />\n\n                    <small>\n                      Size : M\n                </small>\n                    <br />\n                    <small>\n                      Color : White, Gold\n                </small>\n                  </div>\n                </td>\n                <td> <strong>\n                  $98.00</strong></td>\n                <td>  <span className=\"remove\" onClick={() => setcount4(count4 > 1 ? count4 - 1 : 0)}>-</span><input onChange={valueChange} value={count4} setcount1=\"text\" /><span onClick={() => setcount4(count4 + 1)} className=\"add\">+</span> </td>\n                <td> <strong>{`$ ${count4 * 98}`}</strong></td>\n\n              </tr>\n\n\n            </tbody>\n          </table>\n        </div>\n      </section>\n\n\n\n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}